# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        l=len(nums)
        if l==0:
            return
        else:
            index=l//2
            root=TreeNode(nums[index])
            root.left=self.sortedArrayToBST(nums[0:index])
            root.right=self.sortedArrayToBST(nums[index+1:])
        return root
        
    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:
        lst=[]
        while head:
            lst.append(head.val)
            head=head.next
        print(lst)
        return self.sortedArrayToBST(lst)
"""    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        l=len(nums)
        if l==0:
            return
        else:
            index=l//2
            root=TreeNode(nums[index])
            root.left=self.sortedArrayToBST(nums[0:index])
            root.right=self.sortedArrayToBST(nums[index+1:])
        return root




        l=len(lst)
        if l==0:
            return
        else:
            index=l//2
            root=TreeNode(lst[index])
            root.left=self.sortedListToBST(lst[0:index])
            root.right=self.sortedListToBST(lst[index+1:])
        return root """
